{"version":3,"file":"Exports.js","sourceRoot":"","sources":["../src/Exports.ts"],"names":[],"mappings":"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","sourcesContent":["import Substitute from '@fluffy-spoon/substitute';\r\n\r\nimport { ObjectSubstitute, OmitProxyMethods } from '@fluffy-spoon/substitute/dist/src/Transformations';\r\n\r\nexport type Constructor<T = any> = { new(...args): T };\r\n\r\nexport class Autofaker {\r\n    private _registration: InversionOfControlRegistration;\r\n    private _lastRealType: Constructor;\r\n\r\n    private readonly _registeredFakes: Array<{\r\n        registered: Constructor,\r\n        containing: Constructor\r\n    }>;\r\n\r\n    constructor() {\r\n        this._registeredFakes = new Array();\r\n        this._lastRealType = null;\r\n    }\r\n\r\n    useInversionOfControlProvider(provider: InversionOfControlRegistration) {\r\n        if(provider instanceof InversionOfControlRegistration)\r\n            this._registration = provider;\r\n        else\r\n            throw new Error('The given value is not a valid Inversion of Control provider.');\r\n    }\r\n\r\n    registerFakesForConstructorParameterTypesOf<T extends Constructor>(type: T) {\r\n        if(!this._registration)\r\n            throw new Error('An Inversion of Control provider must be set up first.');\r\n        \r\n        const argumentTypes = this._registration.getConstructorArgumentTypesForClass(type);\r\n        for(let argumentType of argumentTypes) {\r\n            this._registeredFakes.push({\r\n                containing: type,\r\n                registered: argumentType\r\n            });\r\n\r\n            const instance = Substitute.for();\r\n            this._registration.registerTypeAsInstanceFromAccessor(argumentType, () => instance);\r\n        }\r\n    }\r\n\r\n    resolveFakeInstance<T>(type: Constructor<T>): ObjectSubstitute<OmitProxyMethods<T>, T> {\r\n        const registered = this._registeredFakes.filter(x => x.registered === type)[0];\r\n        if(!registered)\r\n            throw new Error('The instance that was created from the requested type ' + this.extractClassName(type) + ' has not been registered as a fake. Perhaps it is no longer a dependency in the constructor of a class? Use the resolveInstance method instead if this was intentional.');\r\n\r\n        if(this._lastRealType)\r\n            throw new Error(`Calling resolveFakeInstance(${this.extractClassName(type)}) after a resolveInstance(${this.extractClassName(this._lastRealType)}) call can have unintended side-effects and is not allowed. Make sure you resolve all your fake instances before resolving the real one (${this.extractClassName(this._lastRealType)}).`);\r\n\r\n        const instance = this._registration.resolveInstance(type);\r\n        return instance as any;\r\n    }\r\n\r\n    resolveInstance<T>(type: Constructor<T>): T {\r\n        const registered = this._registeredFakes.filter(x => x.registered === type)[0];\r\n        if(registered)\r\n            throw new Error('The instance that was created from the requested type ' + this.extractClassName(type) + ' has been registered as a fake because it is a dependency in the class ' + this.extractClassName(registered.containing) + '. Use the resolveFakeInstance method instead if this was intentional.');\r\n\r\n        this._lastRealType = type;\r\n\r\n        const instance = this._registration.resolveInstance(type);\r\n        return instance as any;\r\n    }\r\n\r\n    private extractClassName(cls) {\r\n        return cls.name || cls;\r\n    }\r\n}\r\n\r\nexport abstract class InversionOfControlRegistration {\r\n    abstract registerTypeAsInstanceFromAccessor(type: Constructor<any>, accessor: () => any): void;\r\n    abstract getConstructorArgumentTypesForClass<T extends Constructor>(type: T): Array<Constructor>;\r\n    abstract resolveInstance<T>(type: Constructor<T>): T;\r\n}"]}